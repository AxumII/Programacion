import numpy as np
import matplotlib.pyplot as plt
from Integral_Fourier import Integral_Fourier as intf
from Generator import Generator as gen


def codigo():
    print("Ejecuta codigo")
    print("Para usar este codigo es necesario definir l,N,fs")
    
    l = 8
    fs = 500
    arm = 50
    
    #crea el objeto de la clase generadora
    f = gen(-l,l,fs)
    
    #genera la variable independiente con el metodo de la clase generadora
    t = f.t()
    
    
    #genera funciones 
    f1 = f.sq(5,0.7)
    f2 = f.triang(4,0.5)
    f3 = f.new('1.5 * exp(1.2 * t)')
    
    
    #Las funciones a trozos requeiren 3 atributos, el primero es la funcion, y luego esta el intervalo de los trozos para definir la entrada
    
    trozos1 = np.array([['(1/3)*t**2', -l, 1],
                      ['exp(t)', 1, 4],
                      ['15*sin(t)', 4, l]])    
    f4 = f.new_piece(trozos1) #aca llama a la funcion y le pasa la matriz que indica los trozos
    
    trozos2 = np.array([['2*(t+6)* (t+5.1) *(t+7.5)', -l, -5.1],
                      ['-15 *( (t + 5.1) * (t + 3.72))', -5.1,-3.72 ],
                      ['(1/60)*(t**4 - 3*(t**3) - 30*(t**2) -5*t + 50 )', -3.72, l]])   
     
    f5 = f.new_piece(trozos2) #aca llama a la funcion y le pasa la matriz que indica los trozos
    
    
    
    
    # (1/60)*(t**4 - (3*t)**3 - (25*t)**2 - 5*t + 50)
    #0.2* (t+6)* (t+4) *(t+7)
    ##################################################################################
    
    iff1 = intf(t,f1,arm)
    iff1.graf()
    
    iff2 = intf(t,f2,arm)
    iff2.graf()
    
    iff3 = intf(t,f3,arm)
    iff3.graf()
    
    iff4 = intf(t,f4,arm)
    iff4.graf()
    
    iff5 = intf(t,f5,arm)
    iff5.graf()

    
    
    
    
codigo()