class Clase: #define la clase
    atributo1 = int   #atributos que se deben definir inicialmente
    atributo2 = int   
    atributo3 = 9 #le da un valor inicial, todos estan en un estado inicial

    def __init__(self): #constructor, aca si es necesario para dar forma al objeto, lo ideal es no darle argumentos
        #en java solo existe para no confundir argumentos y atributos a los metodos, lo recomendable es solo usarlo para eso, no como funcion como tal
        #entonces no se ponen los atributos como entradas de datos ya que se pueden cargar directamente desde el objeto
        #es mas, no es necesario definir los atributos como se muestra ne la parte superior, se pueden definir aca mismo y darles un valor inicial o solo definir el tipo de dato
        #en otros lenguajes si es necesario definir las variables fuera del constructor y luego poner el constructor, aun asi, el programa funciona
        self.atributo1 = 1 #aca sobreeescribo los int
        self.atributo2 = 2
        self.atributo3 = 9 #aca sobreescribo el valor inicial, pero es para recordar que es inneceasrio definirlo dos veces
        self.__atributo4 = "invariable, encapsulado"
    #El programa puede funcionar tranquilamente sin el constructor


    def metodo1(self): #esto ya es un metodo, aca ya se empieza a usar y crear algoritmos de acuerdo a las entradas del codigo
        print("ejecuta el metodo1") # en este caso solo se imprime un msj y cambia una variable
        self.atributo1 = 0
        #el self permite llamar a la clase y relacionarla
        #es igual al this de java
    
    def metodo2(self):#este metodo usa atributos de la clase sin requerir una entrada, solo los carga y ya, para eso es el self, podria tambien ponerles una entrada y operarlos con los atributos
        print("se ejecuta el metodo 2")
        if (self.atributo1 == 0):
            return "si es 0"
        else:
            return "no es 0"

    def metodo3(self,x,y):#los metodos son una funcion cualquiera, solo que aparte de las dos entradas que tiene, tambien estan los atributos, por algo el self, para poder usarlos
        print("se ejecuta el metodo3")
        z = self.atributo1 + x #aca ya el atributo1 vale 0, se operan normales con los argumentos
        print(z)
        a = self.atributo2 + self.atributo1 + y
        print(a)
        return z*a #funciona correctamente como una funcion XDXD, igual los retornos

    def metodo4(self):
        print("se ejecuta el metodo 4")
        print(self.__atributo4)
        self.__atributo4 = "modficar"
        print(self.__atributo4)# es accesible desde dentro, asi que se modifica
        Chequeo = self.__metodo5
        print(self.__metodo5)
        #print(self.__Varpriv) no funciona al ser exvclusiva de su metodo
        

    def __metodo5(self): #Este metodo solo es accesible desde la clase, no desde el exterior
        self.__Varpriv = "Varpriv m5"
        print("se ejecuta el metodo 5")
        print(self.__Varpriv)



Objeto1 = Clase() #esto es un objeto
Var1 = Objeto1.atributo1 #se accede al atributo y se iguala a una variable para manejarlo
print(Var1) #imprime var1, que como se ve, tiene valor de entrada 1
Var2 = Objeto1.metodo1() #se accede al metodo y se iguala a una variable usandolo como funcion y llamandola, tambien ejecuta el metodo
# en este caso, el metodo imprime el mensjae y cambia el valor de una atributo, es equivalente a Objeto1.atributo1 = 0
print(Var2) #aca no es util imprimir, ya que el metodo se ejecuto previamente
Objeto1.metodo2()
Var3 = Objeto1.metodo2() ##aca se ejecuta el return y al imprimir se ve que efectivamente atributo1 = 0
print(Var3)
print(Var1)#aca si bien se sabe que en el metodo se modifico, se esta llamando a var1 que se uso previamente
#el atributo1 ya vale 0, solo que ese metodo no tiene el valor actualizado
print(Objeto1.atributo1) #aca se corrobora que es 0, la var 1 no se ha actualizado
Var1 = Objeto1.atributo1
print(Var1,"XD")#aca ya vale 0 var1
Objeto1 = Clase()
Var4 = Objeto1.metodo3(7,9)
print(Var4)
Objeto1.metodo4()
#print(Objeto1.__atributo4)#no sirve si se ejecuta, porque es privado y no se puede acceder
#print(Objeto1.__metodo5) #no sirve, esta encapsulado


    

