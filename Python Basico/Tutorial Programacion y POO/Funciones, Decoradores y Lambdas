#Decoradores
#Son una funcion que tiene como argumento una funcion, la edita y retorna una funcion distinta

"""def decorador(Func):#Esti es el decorador y la funcion de entrada
    #la funcion de entrada Func es igual a saludo()
    
    def envoltura():#Ignorar, son las funciones a editar el codigo
        print("esto se a単ade a la funcion original")
        Func()

    def envoltura2():
        print("esto tambien se a単ade")
        Func()

    return envoltura,envoltura2 #Aca retorna lo editado

def Saludo(): #Funcion original
    print("Hola") #Contenido Original de la funcion



decorador(Saludo)#llamada del decorador, se le pasa la funcion original como argumento
Saludo()"""

#Funciones anonimas lambda

Id = lambda int: int +1
print(Id(1))

#funcion de unico renglon que genera un return automatico, no importa el numero de argumentos
#la entrada se usa en el "metodo"creado, y el conjunto es la salida

#high order functions
#filter : filtra valores por medio de un lambda, similar a c++ pero con el lambda explicito
lista = [1,7,5,6,9,8,12,45,65,25,48,36]
lista.sort()
odd = list(filter(lambda x: x%2 != 0, lista))#filtra los impares
print(odd)

#map: escala valores con un factor determinado
a単adido = [15,34,78,98,25,56,46,2,6]
lista.extend(a単adido)
lista.sort()
print(lista)
Scaled = list(map(lambda x: x*2+(x+5),lista))
print(Scaled)

#reduce
#requiere llamar al modulo functools
from functools import reduce
Result = reduce(lambda a,b: (a*b)-b+a,lista)
print(Result)